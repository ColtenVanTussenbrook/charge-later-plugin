<?php

function kite_stripe_capture_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {
		global $stripe_options;
		global $wpdb;
		// get Stripe library from Composer
    require_once( plugin_dir_path(__FILE__) . 'vendor/autoload.php');
		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];

		// check if we are using test mode
		if(isset($stripe_options['test_mode']) && $stripe_options['test_mode']) {
			$secret_key = $stripe_options['test_secret_key'];
		} else {
			$secret_key = $stripe_options['live_secret_key'];
		}

		//create variables from user input
		$billing_first_name = strip_tags(trim($_POST['first-name']));
		$billing_last_name = strip_tags(trim($_POST['last-name']));
		$billing_email = strip_tags(trim($_POST['user-email']));

		 try {
		//attempt to create a new customer
		\Stripe\Stripe::setApiKey($secret_key);

			$customer = \Stripe\Customer::create ([
				'card' => $token,
				'email' => $billing_email,
			]);

			//create variable for customer id
			$customer_id = $customer->id;

			//add data to chargelater database table
			$wpdb->insert (
					$wpdb->prefix . 'chargelater',
					array (
						'first_name'=>$billing_first_name,
						'last_name'=>$billing_last_name,
						'email'=>$billing_email,
						'customer_id'=>$customer_id
				)
			);

			// redirect on successful payment capture
			$redirect = add_query_arg('user-logged-in', 'yes', $_POST['redirect']);

		} catch (Exception $e) {
			// redirect on failed payment
			$redirect = add_query_arg('user-logged-in', 'no', $_POST['redirect']);
      echo "payment failed";
		}

		//redirect back to our previous page with the added query variable
		wp_redirect($redirect);
		exit;
	}
}


add_action('init', 'kite_stripe_capture_payment');

?>
